# from matplotlib.axes import Axes
# import matplotlib.axis as maxis
# from matplotlib.projections import register_projection

import matplotlib.pyplot as plt
import numpy as np

import copy

from . import utils

def subplots(times,nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True,
             gridspec_kw=None, **fig_kw):
    """ create figure and subplot axes with same time (x) axis

    Non-Market hours will not be included in the plot.

    Notably a custom projection is used for the time axis, and the time values
    are expected to be the same in all subplots. The Axes that are returned
    are not of the usual matplotlib Axes format, but of our custom TSeriesAxes
    type. The usual Axes methods are avaialable, in addtion to some methods
    specific to TSeriesAxes.

    Args:
        - times: the time series for all subplots. Pandas DatetimeIndex object
                 expected.
         - following arguments follow matplotlib pyplot.subplots format
    Returns:
        - (fig, axes) tuple:
            * fig: matplotlib.figure.Figure object
            * axes: array of systrade.plotting.utils.TSeriesAxes objects
    """
    fig, axes = plt.subplots(nrows, ncols,
                             sharex=sharex,
                             sharey=sharey,
                             squeeze=squeeze,
                             gridspec_kw=gridspec_kw,
                             subplot_kw=dict(projection='time_series'),
                             **fig_kw)
    if nrows*ncols>1:
        for ax in axes:
            ax.set_xaxis_markettime(times)
    else:
        axes_arr=np.empty((1,),dtype=utils.TSeriesAxes)
        axes_arr[0] = axes
        axes_arr[0].set_xaxis_markettime(times)
        axes = axes_arr
    return fig,axes

def plot_stock_indictor(stocks_df,ticker,indicator_df,signal_dict=None):
    """ plot a stock and an indicator on vertically stacked subplots

    Optionally further include a signal, such that buy and sell signals can be
    plotted.

    Non-Market Hours will not be plotted - Allowing for easier interpretation.

    Args:
        - stocks_df: DataFrame of stocks over time
        - ticker: the ticker of the stock to plot
        - indicator_df: DataFrame of the indicator over time to plot, time axis
                        expected to be the same as for stocks_df
    Keyword Args:
        - signal_dict: Dictionary of a signal - generated by the method
                       'request_historical' on a systrade.models.signals object.

    """

    if signal_dict is not None:
        if ticker not in signal_dict:
            raise ValueError("signal_dict does not have "+ticker+" as a key")

    if not isinstance(ticker,str):
        raise TypeError("ticker expected to be a string")

    fig, axes = subplots(stocks_df.index,2,1)
    fig.set_size_inches((10,10))

    axes[0].plot_tseries(stocks_df.index,stocks_df[ticker],color='k',label=ticker)
    axes[0].set_xticklabels([])
    if signal_dict is not None:
        sig_name = list(signal_dict[ticker].columns)[0]
        for i,r in signal_dict[ticker].iterrows():
            buysell = r[sig_name]
            if buysell>0:
                axes[0].plot_vert(i, stocks_df[ticker][0]-2.5,stocks_df[ticker][0]+1.0,color='r',LineStyle='--')
            else:
                axes[0].plot_vert(i, stocks_df[ticker][0]-2.5,stocks_df[ticker][0]+1.0,color='y',LineStyle='--')

    axes[0].set_ylabel('stock value')
    axes[0].legend(frameon=False)

    axes[1].plot_tseries(stocks_df.index,indicator_df[ticker],color='b',label='indicator')
    buylabel = True
    selllabel = True
    if signal_dict is not None:
        sig_name = list(signal_dict[ticker].columns)[0]
        for i,r in signal_dict[ticker].iterrows():
            buysell = r[sig_name]
            if buysell>0:
                if buylabel:
                    axes[1].plot_vert(i, -0.5,0.5,color='r',LineStyle='--',label='buy signal')
                    buylabel=False
                else:
                    axes[1].plot_vert(i, -0.5,0.5,color='r',LineStyle='--')
            else:
                if selllabel:
                    axes[1].plot_vert(i, -0.5,0.5,color='y',LineStyle='--',label='sell signal')
                    selllabel=False
                else:
                    axes[1].plot_vert(i, -0.5,0.5,color='y',LineStyle='--')
    # TODO: we wouldn't always want the line at 0!
    axes[1].plot_horiz(0,indicator_df.index.min(), indicator_df.index.max(),color='k',LineStyle='--')
    axes[1].set_ylabel('indicator value')
    axes[1].set_xlabel('time')
    axes[1].legend(frameon=False)

    fig.autofmt_xdate()

    plt.show()

# could be useful for plotting days only on x axis for instance
# inds_day_start = list(stocks_df.index.indexer_between_time('09:29','09:33'))
# print(inds_day_start)
# day_starts = [stocks_df.index.to_series().iloc[i] for i in inds_day_start]
# print(day_starts)
# plt.xticks(day_starts)
# plt.xticklabels([d.day for d in day_starts])
